use clap::ArgMatches;
use std::fs;
use std::path::Path;

pub async fn run(matches: &ArgMatches) {
    let port = matches.get_one::<String>("port").unwrap();
    let http_port = matches.get_one::<String>("http-port").unwrap();
    let http_token = matches.get_one::<String>("http-token");
    let http_cors = matches.get_flag("http-cors");
    let http_audit = matches.get_flag("http-audit");
    let preset = matches.get_one::<String>("preset");

    println!("‚úì Starting Symbiont runtime...");

    // Create symbi.quick.toml if it doesn't exist
    if !Path::new("symbi.toml").exists() && !Path::new("symbi.quick.toml").exists() {
        create_quick_config(http_token.map(|s| s.as_str()));
        println!("‚úì Created symbi.quick.toml with development defaults");
    }

    // Scan agents directory
    let agents_found = scan_agents_directory();

    println!("‚úì Runtime started on :{}", port);
    println!("‚úì HTTP Input enabled on :{}", http_port);

    if let Some(agent) = agents_found.first() {
        println!("‚Üí Auto-routing /webhook ‚Üí {}", agent);
    }

    if http_token.is_none() {
        println!("‚Üí Dev token: dev (insecure, rotate in production)");
        println!("‚ö†Ô∏è  Warning: Using insecure default token. Set --http.token for production.");
    }

    if let Some(preset_name) = preset {
        println!("‚Üí Using preset: {}", preset_name);
    }

    if http_cors {
        println!("‚Üí CORS enabled with sensible defaults");
    }

    if http_audit {
        println!("‚Üí HTTP audit logging enabled");
    }

    println!("\nüìù Next steps:");
    println!("  ‚Ä¢ Test webhook: curl -H \"Authorization: Bearer dev\" http://localhost:{}/webhook -d '{{\"test\":true}}'", http_port);
    println!("  ‚Ä¢ View status: symbi status");
    println!("  ‚Ä¢ View logs: symbi logs -f");
    println!("\nPress Ctrl+C to stop the runtime");

    // Keep the runtime alive (placeholder - actual runtime would go here)
    tokio::signal::ctrl_c().await.unwrap();
    println!("\n‚úì Runtime stopped");
}

fn create_quick_config(http_token: Option<&str>) {
    let token = http_token.unwrap_or("dev");
    let config = format!(
        r#"# Symbiont Quick Start Configuration
# Generated by symbi up

[runtime]
mode = "dev"
hot_reload = true

[http]
enabled = true
port = 8081
dev_token = "{}"

[storage]
type = "sqlite"
path = "./symbi.db"

[logging]
level = "info"
format = "pretty"
"#,
        token
    );

    fs::write("symbi.quick.toml", config).expect("Failed to create symbi.quick.toml");
}

fn scan_agents_directory() -> Vec<String> {
    let agents_dir = Path::new("agents");
    let mut agents = Vec::new();

    if agents_dir.exists() && agents_dir.is_dir() {
        if let Ok(entries) = fs::read_dir(agents_dir) {
            for entry in entries.flatten() {
                if let Some(ext) = entry.path().extension() {
                    if ext == "dsl" {
                        if let Some(name) = entry.path().file_name() {
                            agents.push(name.to_string_lossy().to_string());
                        }
                    }
                }
            }
        }
    }

    agents
}
