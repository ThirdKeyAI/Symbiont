# OpenRouter Git Agent Configuration
# This file contains all configuration options for the agent

[openrouter]
# Your OpenRouter API key (required)
# Get one from: https://openrouter.ai/keys
api_key = "your_openrouter_api_key_here"

# Base URL for OpenRouter API
base_url = "https://openrouter.ai/api/v1"

# Default model to use for requests
model = "anthropic/claude-3.5-sonnet"

# Request timeout in seconds
timeout_seconds = 60

# Maximum tokens for responses
max_tokens = 4000

# Temperature for response generation (0.0-1.0)
temperature = 0.1

[git]
# Directory where repositories will be cloned
clone_base_path = "./temp_repos"

# Maximum file size to analyze (in MB)
max_file_size_mb = 1

# File extensions to include in analysis
allowed_extensions = [
    "rs", "py", "js", "ts", "go", "java", "cpp", "c", "h", "hpp",
    "rb", "php", "swift", "kt", "scala", "clj", "hs", "ml", "elm",
    "md", "txt", "json", "yaml", "yml", "toml", "xml", "html", "css"
]

# Patterns to ignore during analysis
ignore_patterns = [
    ".git/", "node_modules/", "target/", "build/", "dist/", "vendor/",
    "__pycache__/", ".pytest_cache/", ".cargo/", ".next/", ".nuxt/",
    "*.lock", "*.log"
]

# Maximum number of files to analyze per repository
max_files_per_repo = 1000

[symbiont]
# Path where agent context and knowledge will be stored
context_storage_path = "./agent_storage"

# Qdrant vector database configuration
qdrant_url = "http://localhost:6333"
collection_name = "agent_knowledge"
vector_dimension = 1536

# Context management settings
enable_compression = true
max_context_size_mb = 100

[security]
# Enable SchemaPin cryptographic verification
enable_schemapin = false

# Path to SchemaPin CLI binary (optional, will use system PATH if not specified)
# schemapin_binary_path = "/usr/local/bin/schemapin-cli"

# Security policy file path (optional)
# policy_file = "./security_policies.yaml"

# Enable sandbox execution environment
enable_sandbox = false

# Sandbox security tier: "Tier1", "Tier2", "Tier3"
sandbox_tier = "Tier2"

# Trusted domains for repository operations
trusted_domains = [
    "github.com",
    "gitlab.com"
]

[logging]
# Log level: error, warn, info, debug, trace
level = "info"

# Log to file (optional)
# file = "./agent.log"

# Enable structured JSON logging
json = false

[examples]
# Default repository for testing
test_repository = "https://github.com/rust-lang/mdBook"

# Custom analysis queries for code analysis
code_analysis_queries = [
    "What is the main purpose and functionality of this codebase?",
    "What are the key architectural patterns and design decisions?", 
    "How is error handling implemented throughout the project?",
    "What are the main entry points and core modules?",
    "Are there any potential performance bottlenecks or optimization opportunities?"
]

# Security checks for security review
security_checks = [
    "Scan for hardcoded secrets, API keys, or credentials",
    "Identify potential SQL injection vulnerabilities",
    "Look for unsafe deserialization or eval() usage",
    "Check for proper input validation and sanitization",
    "Review authentication and authorization implementations",
    "Identify potential XSS or CSRF vulnerabilities",
    "Check for insecure cryptographic practices"
]

# Documentation requests for documentation generation
documentation_requests = [
    "Generate a comprehensive README with project overview and setup instructions",
    "Create API documentation for all public interfaces and functions",
    "Document the project architecture and key design patterns",
    "Generate installation and development setup guides",
    "Create usage examples and code tutorials"
]

[workflow]
# Default autonomy level: "manual", "auto-backup", "autonomous"
default_autonomy_level = "auto-backup"

# Enable automatic backups before making changes
enable_backups = true

# Directory where backups will be stored
backup_directory = "./backups"

# Timeout for user confirmations in seconds
confirmation_timeout_seconds = 30

# Maximum retry attempts for failed operations
max_retry_attempts = 3

[validation]
# Enable syntax checking of code changes
enable_syntax_checks = true

# Enable dependency impact analysis
enable_dependency_checks = true

# Enable broader impact analysis
enable_impact_analysis = true

# Timeout for validation operations in seconds
validation_timeout_seconds = 60

# Strict mode - fail on any validation issues
strict_mode = false

[safety]
# Enable safety checks for dangerous operations
enable_safety_checks = true

# Risk threshold: "low", "medium", "high"
risk_threshold = "medium"

# Patterns that should be protected from modification
protected_patterns = [
    "*.env", "*.key", "*.pem", "password", "secret"
]

# Operations considered dangerous
dangerous_operations = [
    "rm -rf", "format", "delete"
]

# Require confirmation for high-risk operations
require_confirmation_for_high_risk = true